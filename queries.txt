// TRAFFIC

timeRangeStart = 2023-05-22T00:00:00Z
timeRangeStop = 2023-05-23T00:00:00Z
city = "Capena"
thres = 130

data = from(bucket: "traffic")
  |> range(start: timeRangeStart, stop: timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "traffic" and r["city"] == city and r["_field"] == "speed_max" and r["_value"] > thres)

rushHour = data
  |> drop(columns: ["host", "lat", "lng", "license_plate", "region", "timestamp"]) 
  |> map(fn: (r) => ({r with _value: 1}))
  |> aggregateWindow(every: 1h, fn: sum, createEmpty: false)
  |> sort(columns: ["_value"], desc: true)
//   |> limit(n: 1)
  |> map(fn: (r) => ({r with _field: "count"}))

rushHour


timeRangeStart = 2023-05-22T00:00:00Z
timeRangeStop = 2023-05-23T00:00:00Z
city = "Capena"
thres = 130

data = from(bucket: "traffic")
  |> range(start: timeRangeStart, stop: timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "traffic" and r["_field"] == "speed_max" and r["_value"] > thres)

countByHour = data
  |> keep(columns: ["_measurement", "_field", "_value", "_time", "city"]) 
  |> map(fn: (r) => ({r with _value: 1}))
  |> aggregateWindow(every: 1h, fn: sum, createEmpty: false)
  |> group(columns: ["_time", "city"])
//   |> limit(n: 1)
  |> map(fn: (r) => ({r with _field: "count"}))

countByHour

timeRangeStart = 2023-05-22T00:00:00Z
timeRangeStop = 2023-05-23T00:00:00Z
city = "Capena"
thres = 130

data = from(bucket: "traffic")
  |> range(start: timeRangeStart, stop: timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "traffic" and r["_field"] == "speed_max" and r["_value"] > thres)

totalRushHour = data
  |> keep(columns: ["_measurement", "_field", "_value", "_time"]) 
  |> map(fn: (r) => ({r with _value: 1}))
  |> aggregateWindow(every: 1h, fn: sum, createEmpty: false)
//   |> group(columns: ["_time"])
  |> sort(columns: ["_value"], desc: true)
//   |> limit(n: 1)
  |> map(fn: (r) => ({r with _field: "count"}))

totalRushHour

// ENERGY

timeRangeStart = 2023-05-22T00:00:00Z
timeRangeStop = 2023-05-23T00:00:00Z
name = "CENTRALE DI SCANDALE"
perc = 0.7

data = from(bucket: "energy")
  |> range(start: timeRangeStart, stop: timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "energy" and r["_field"] == "current_load_max" and r["_value"] > perc * float(v: r["capacity"]))

dangerousStations = data
  |> keep(columns: ["_measurement", "_field", "_value", "_time", "name", "fuel_type"]) 
  |> map(fn: (r) => ({r with _value: 1}))
  |> aggregateWindow(every: 1h, fn: sum, createEmpty: false)
  |> group(columns: ["time"]) //metti anche "name"
  |> sort(columns: ["_value"], desc: true)
//   |> limit(n: 1)
  |> map(fn: (r) => ({r with _field: "warning"}))

dangerousStations

//WEATHER
timeRangeStart = 2023-05-22T00:00:00Z
timeRangeStop = 2023-05-23T00:00:00Z
name = "CENTRALE DI SCANDALE"
status = "Rain"

data = from(bucket: "weather")
  |> range(start: timeRangeStart, stop: timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "weather" and r["_field"] == "temp_diff_max")

locationMaxDiff = data
  |> keep(columns: ["_measurement", "_field", "_value", "_time", "location"]) 
//   |> map(fn: (r) => ({r with _value: 1}))
  |> aggregateWindow(every: 15m, fn: max, createEmpty: false)
  |> group(columns: ["_time"]) //metti anche "name"
  |> sort(columns: ["_value"], desc: true)
  |> limit(n: 1)
  |> map(fn: (r) => ({r with _field: "diff_mean"}))
//   |> pivot(rowKey: ["_time"], columnKey: ["location"], valueColumn: "_value")

locationMaxDiff